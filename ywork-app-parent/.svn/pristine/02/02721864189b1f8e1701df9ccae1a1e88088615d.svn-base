package me.ywork.suite.webapi.rpc;

import java.io.UnsupportedEncodingException;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.heyi.framework.messagebus.kafka.KafkaProducer;

import me.ywork.kfkmessage.DingHttpPostMessage;
import me.ywork.message.base.AbstractDingMessage;
import me.ywork.message.base.AbstractDingMessageHeader;
import me.ywork.message.base.AbstractDingMessageResult;
import me.ywork.message.base.DingCorpMessageHeader;
import me.ywork.message.base.DingCorpMessageResult;
import me.ywork.message.base.DingGroupMessageResult;
import me.ywork.message.topic.KafkaTopics;
import me.ywork.suite.api.rpc.IDingAPIRpcService;
import me.ywork.suite.constants.DingAPIConstants;
import me.ywork.suite.service.DingCorpTokenService;
import me.ywork.suite.service.DingSuiteThirdAppService;
import me.ywork.suite.util.DingAPIHttpUtil;

public class DingAPIRpcServiceImpl implements IDingAPIRpcService{
	
	private Logger logger = LoggerFactory.getLogger(DingAPIRpcServiceImpl.class);
	
	@Autowired
	private DingSuiteThirdAppService dingSuiteThirdAppService;
	
	@Autowired
	private DingCorpTokenService dingCorpTokenService;

	@Override
	public <H extends AbstractDingMessageHeader, M extends AbstractDingMessage> void sendDingGroupMessageAsync(
			String corpid, String suiteId, String appId, H messageHeader,
			M message) {
		if (StringUtils.isBlank(corpid)) {
				throw new IllegalArgumentException(
						"sendDingGroupMessage - parameter companyId is null or empty.");
			}
			
			if (messageHeader == null) {
				throw new NullPointerException(
						"sendDingGroupMessage - parameter messageHeader is null.");
			}
			
			if (message == null) {
				throw new NullPointerException(
						"sendDingGroupMessage - parameter message is null.");
			}
			
			String agentId = dingSuiteThirdAppService.getAgentId(corpid, suiteId, appId);
			
			if(StringUtils.isBlank(agentId)){
				logger.error("sendDingCorpMessage agentid is null , corpId:"+corpid+",suiteId:"+suiteId+",appId:"+appId);
				throw new NullPointerException(
						"sendDingCorpMessage - third app's agent is null.");
			}
			messageHeader.setAgentid(agentId);
			
			// 组装钉消息JSON
			// 消息头
			JSONObject jsonObject = (JSONObject) JSONObject.toJSON(messageHeader);
			if (jsonObject == null) {
				throw new IllegalStateException("将钉消息头转换成JSONObject失败。");
			}
			
			// 加入消息体
			jsonObject.put(messageHeader.getMsgtype().getCode(),
					JSON.toJSON(message));
			
			DingHttpPostMessage postMessage = new DingHttpPostMessage();
			
			postMessage.setCorpId(corpid);
			postMessage.setSuiteId(suiteId);
			postMessage.setDingUrl(DingAPIConstants.SEND_MESSAGE_CONVERSATION);
			postMessage.setJsonObject(jsonObject);
			
			KafkaProducer.getInstance().sendMessage(KafkaTopics.YWORK_DING_HTTP_MESSAGE.getTopic(), postMessage);
	}

	@Override
	public <H extends DingCorpMessageHeader, M extends AbstractDingMessage> void sendDingCorpMessageAsync(
			String corpId, String suiteId, String appId, H messageHeader,
			M mesage) {

		String agentId = dingSuiteThirdAppService.getAgentId(corpId, suiteId, appId);
		
		if(StringUtils.isBlank(agentId)){
			logger.error("sendDingCorpMessage agentid is null , corpId:"+corpId+",suiteId:"+suiteId+",appId:"+appId);
			throw new NullPointerException(
					"sendDingCorpMessage - third app's agent is null.");
		}
		messageHeader.setAgentid(agentId);
		// 组装钉消息JSON
		// 消息头
		JSONObject jsonObject = (JSONObject) JSONObject.toJSON(messageHeader);
		if (jsonObject == null) {
			throw new IllegalStateException("将钉消息头转换成JSONObject失败。");
		}
		// 加入消息体
		jsonObject.put(messageHeader.getMsgtype().getCode(),
				JSON.toJSON(mesage));
				
		DingHttpPostMessage postMessage = new DingHttpPostMessage();
		
		postMessage.setCorpId(corpId);
		postMessage.setSuiteId(suiteId);
		postMessage.setDingUrl(DingAPIConstants.SEND_MESSAGE);
		postMessage.setJsonObject(jsonObject);
		
		KafkaProducer.getInstance().sendMessage(KafkaTopics.YWORK_DING_HTTP_MESSAGE.getTopic(), postMessage);
	}

	@SuppressWarnings("unchecked")
	@Override
	public <R extends AbstractDingMessageResult, H extends AbstractDingMessageHeader, M extends AbstractDingMessage>
	     R sendDingGroupMessage(String corpid,String suiteId,String appId,  H messageHeader, M message) {
		if (StringUtils.isBlank(corpid)) {
			throw new IllegalArgumentException(
					"sendDingGroupMessage - parameter companyId is null or empty.");
		}
		
		if (messageHeader == null) {
			throw new NullPointerException(
					"sendDingGroupMessage - parameter messageHeader is null.");
		}
		
		if (message == null) {
			throw new NullPointerException(
					"sendDingGroupMessage - parameter message is null.");
		}
		
		String agentId = dingSuiteThirdAppService.getAgentId(corpid, suiteId, appId);
		if(StringUtils.isBlank(agentId)){
			logger.error("sendDingCorpMessage agentid is null , corpId:"+corpid+",suiteId:"+suiteId+",appId:"+appId);
			throw new NullPointerException(
					"sendDingCorpMessage - third app's agent is null. corpId:"+corpid+",suiteId:"+suiteId+",appId:"+appId);
		}
		messageHeader.setAgentid(agentId);
		
		// 组装钉消息JSON
		// 消息头
		JSONObject jsonObject = (JSONObject) JSONObject.toJSON(messageHeader);
		if (jsonObject == null) {
			throw new IllegalStateException("将钉消息头转换成JSONObject失败。");
		}
		
		// 加入消息体
		jsonObject.put(messageHeader.getMsgtype().getCode(),JSON.toJSON(message));
		
		// 发送钉钉消息, 得到返回结果
		JSONObject resultJson = null;
		
		String token = dingCorpTokenService.getToken(corpid, suiteId);
		String url = "";
		url = DingAPIConstants.SEND_MESSAGE_CONVERSATION;
		url = url.replace("ACCESS_TOKEN", token);
		
		try {
			String rtnStr = DingAPIHttpUtil.httpPost(url, jsonObject.toJSONString()
					.replace("<br/>", "\r\n"), "sendMsgResult");
			resultJson = JSON.parseObject(rtnStr);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		// 将发送接口返回的JSON转换成具体对象
		return (R) JSON.toJavaObject(resultJson, DingGroupMessageResult.class);
	}
	
//	public String uploadDingStatistics(String corpId, String suiteId,
//			String appId, DingStatistics dingStatistics) {
//		if (StringUtils.isBlank(corpId)) {
//			throw new IllegalArgumentException("uploadDingStatistics - parameter corpId is null or empty.");
//		}
//
//		if (StringUtils.isBlank(suiteId)) {
//			throw new IllegalArgumentException("uploadDingStatistics - parameter suiteId is null or empty.");
//		}
//
//		if (StringUtils.isBlank(appId)) {
//			throw new IllegalArgumentException("uploadDingStatistics - parameter appId is null or empty.");
//		}
//
//		if (dingStatistics == null) {
//			throw new NullPointerException("uploadDingStatistics - parameter dingStatistics is null.");
//		}
//
//		//TODO 对dingStatistics中的参数还要继承检查，以防止客户端（调用者）传入无效的数据过来，以后完善
//
//		// 获取agentId
//		String agentId = dingSuiteThirdAppService.getAgentId(corpId, suiteId, appId);
//		if(StringUtils.isBlank(agentId)){
//			logger.error("uploadDingStatistics agentid is null , corpId:{},suiteId:{} ,appId: {}",
//					corpId, suiteId, appId);
//			throw new IllegalStateException("uploadDingStatistics - third app's agent is null.");
//		}
//
//		try {
//			dingStatistics.setAgentId(agentId);
//
////			DingSuiteThird thirdModel = dingSuiteThirdService
////					.findDingSuiteThirdByCorpId(corpId, suiteId);
//
//			String token = dingCorpTokenService.getToken(corpId, suiteId);
//			String url = StringUtils.isBlank(dingStatistics.getId())
//					   ? DingAPIConstants.CALENDAR_RECORD  // 新增
//					   : DingAPIConstants.CALENDAR_RECORD_UPDATE; // 更新
//			url = url.replace("ACCESS_TOKEN", token);
//			dingStatistics.setAccessToken(token);
//
//			String rtnStr = DingAPIHttpUtil.httpPost(url, JSON.toJSONString(dingStatistics)
//					.replace("<br/>", "\r\n"), "");
//			JSONObject resultJson = JSON.parseObject(rtnStr);
//			if (resultJson == null || resultJson.getIntValue("errcode") != 0) {
//				logger.error("统计接口失败,失败时间:{},post data:{} return data{}",new Date(),JSON.toJSONString(dingStatistics)
//						.replace("<br/>", "\r\n"),resultJson==null?null:resultJson.toJSONString());
//				throw new RuntimeException("向管理日历推送数据失败。return:" + rtnStr);
//			}
//
//			return StringUtils.isBlank(dingStatistics.getId())
//					? resultJson.getString("id")
//					: dingStatistics.getId();
//		} catch (Exception e) {
//			logger.error("uploadDingStatistics", e);
//			throw new RuntimeException(e);
//		}
//	}
	
	

	@Override
	public <R extends DingCorpMessageResult, H extends DingCorpMessageHeader, M extends AbstractDingMessage> R sendDingCorpMessage(
			String corpId, String suiteId, String appId, H messageHeader,
			M mesage) {
		
		String agentId = dingSuiteThirdAppService.getAgentId(corpId, suiteId, appId);
		
		if(StringUtils.isBlank(agentId)){
			logger.error("sendDingCorpMessage agentid is null , corpId:"+corpId+",suiteId:"+suiteId+",appId:"+appId);
			throw new NullPointerException(
					"sendDingCorpMessage - third app's agent is null.");
		}
		messageHeader.setAgentid(agentId);
		// 组装钉消息JSON
		// 消息头
		JSONObject jsonObject = (JSONObject) JSONObject.toJSON(messageHeader);
		if (jsonObject == null) {
			throw new IllegalStateException("将钉消息头转换成JSONObject失败。");
		}
		// 加入消息体
		jsonObject.put(messageHeader.getMsgtype().getCode(),JSON.toJSON(mesage));
		
		// 发送钉钉消息, 得到返回结果
		JSONObject resultJson = null;
			
		String token = dingCorpTokenService.getToken(corpId, suiteId);
		
		String url =DingAPIConstants.SEND_MESSAGE;
		
		url = url.replace("ACCESS_TOKEN", token);
		
		logger.info("---------:"+jsonObject.toJSONString());
		try {
			String rtnStr = DingAPIHttpUtil.httpPost(url, jsonObject.toJSONString().replace("<br/>", "\r\n"), "sendMsgResult");
			resultJson = JSON.parseObject(rtnStr);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		// 将发送接口返回的JSON转换成具体对象
		return (R) JSON.toJavaObject(resultJson, DingCorpMessageResult.class);
	}

	
	
	
	/**
	 * 钉钉后台管理员信息
	 */
	@Override
	public JSONObject getPcAdminInfo(String code) {
		// 获取企业管理员的身份信息 蓝凌账号
		String corpid = "ding79e18f8077de6ae2";
		
		String secret = "MgScTVq4mEdIeKwC_Hh2ls0zd6CwytmViVRPYFyZ-xaODfQP5vRAtUMgYsgUfw_2";
		
		String token = dingCorpTokenService.getPcToken(corpid,secret);
		
		String ADMININFOURL = DingAPIConstants.PC_ADMININFOU;
		
		ADMININFOURL = ADMININFOURL.replace("ACCESS_TOKEN", token).replace("CODE", code);
		
		JSONObject adminInfoNew = DingAPIHttpUtil.httpRequest(ADMININFOURL,"GET", null);

		logger.info("获取企业管理员({})的身份信息:{}", code, adminInfoNew);

		return adminInfoNew;
	}

}
