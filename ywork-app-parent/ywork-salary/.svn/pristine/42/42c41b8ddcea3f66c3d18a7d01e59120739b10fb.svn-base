package me.ywork.salary.service.impl;

import me.ywork.page.PageData;
import me.ywork.page.PageDataImpl;
import me.ywork.page.Pageable;
import me.ywork.salary.model.StaffSalInfoDetailModel;
import me.ywork.salary.model.StaffSalInfoModel;
import me.ywork.salary.repository.StaffSalInfoRepository;
import me.ywork.salary.service.StaffSalInfoService;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by xiaobai on 2017/1/11.
 */
@Service
public class StaffSalInfoServiceImpl implements StaffSalInfoService{
	@Autowired
	private  StaffSalInfoRepository staffSalInfoRepository;
    @Override
    public PageData<StaffSalInfoModel> getStaffSalaryInfos(String corpId , Pageable pageable) {
        if(StringUtils.isBlank(corpId)){
            throw new IllegalArgumentException("getStaffSalaryInfos param corpId is null or empty.");
        }
        //TODO:从持久层得到所有员工工资详情
        List<StaffSalInfoModel> staffSalInfoModels = staffSalInfoRepository.getStaffSalaryInfos(corpId, pageable);
        
        return new PageDataImpl<StaffSalInfoModel>(staffSalInfoModels , pageable);
    }

    @Override
    public StaffSalInfoDetailModel getSalaryInfosByStaffId(String staffId) {
        if(StringUtils.isBlank(staffId)){
            throw new IllegalArgumentException("getSalaryInfosByStaffId param staffId is null or empty.");
        }
        //TODO:从持久层得到该员工的工资详情
        StaffSalInfoDetailModel staffSalInfoDetailModel = new StaffSalInfoDetailModel();
        return staffSalInfoDetailModel;
    }

    @Override
    public List<StaffSalInfoDetailModel> getMutiStaffSalaryInfosDetail(String corpId, List<String> staffids) {
        if(StringUtils.isBlank(corpId)){
            throw new IllegalArgumentException("getMutiStaffSalaryInfosDetail param corpId is null or empty.");
        }
        //TODO:从持久层得到选中员工的工资详情
        List<StaffSalInfoDetailModel> staffSalInfoDetailModels = new ArrayList<StaffSalInfoDetailModel>();
        return staffSalInfoDetailModels;
    }

    @Override
    public Boolean updateMutiStaffInfos(List<StaffSalInfoDetailModel> staffRules) {
        if(staffRules == null){
            throw new IllegalArgumentException("updateMutiStaffInfos param staffRules is null.");
        }
        if(staffRules.isEmpty()){
            throw new IllegalStateException("updateMutiStaffInfos param staffRules is empty.");
        }
        //TODO:从持久层得到批量修改多个人的薪资的结果
        return Boolean.TRUE;
    }

    @Override
    public Object downloadSalaryTemplet() {
        return null;
    }

    @Override
    public Object uploadSalaryTemplet(String fileKey) {
        return null;
    }
}
