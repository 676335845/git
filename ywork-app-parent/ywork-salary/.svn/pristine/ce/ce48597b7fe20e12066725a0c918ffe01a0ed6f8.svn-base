package me.ywork.salary.controller;

import java.io.IOException;
import java.io.InputStream;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.redisson.cache.CacheableService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.alibaba.dubbo.common.logger.Logger;
import com.alibaba.dubbo.common.logger.LoggerFactory;

import me.ywork.context.CallContext;
import me.ywork.controller.RestController;
import me.ywork.oss.OSSObjectService;
import me.ywork.page.PageData;
import me.ywork.page.PageRequest;
import me.ywork.page.Pageable;
import me.ywork.page.PageableDefaults;
import me.ywork.salary.enumeration.ExcelTimeType;
import me.ywork.salary.model.SalAttenExcelModel;
import me.ywork.salary.model.SalCorpAttenModel;
import me.ywork.salary.model.SalCustomizedAttenFieldModel;
import me.ywork.salary.model.SalMutiStaffInfoModel;
import me.ywork.salary.model.SalStaffAttendanceModel;
import me.ywork.salary.model.SalSysFieldItemModel;
import me.ywork.salary.model.SalUpdateMutiStaffModel;
import me.ywork.salary.service.SalAttendanceService;
import me.ywork.salary.service.impl.SalAttendanceServiceImpl;
import me.ywork.salary.util.WorkBookUtil;

/**
  * 考勤模块的控制器
 *
 **/
@Controller
@RequestMapping(value = { "**/app/calsalary/attendance" })
public class SalAttendanceController extends RestController<SalAttendanceService> {
	@Autowired
	private SalAttendanceService attendanceService;
	@Autowired 
	private WorkBookUtil workBookUtil;
	// 缓存机制
	@Autowired
	private CacheableService cacheableService;
	
	private static final Logger logger = LoggerFactory.getLogger(SalAttendanceController.class);
	/**
	 * 得到企业的月度考勤表的分页数据
	 * 
	 * @param request
	 * @param response
	 * @param corpId  悦工作钉钉ID
	 * @param pageable  分页的pageable
	 */
	@RequestMapping(value = "/getAllMonthesAttendanceData**", method = RequestMethod.GET)
	public void getAllMonthesAttendanceData(HttpServletRequest request, HttpServletResponse response) {
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		try {
			List<SalCorpAttenModel> attendanceDatas = attendanceService.getAllMonthesAttendanceData(corpId);
			this.writeSuccessJsonToClient(response, attendanceDatas);
		} catch (Exception e) {
			this.writeFailJsonToClient(response);
			e.printStackTrace();
		}
	}

	/**
	 * 根据考勤表ID来得到月度考勤表的数据
	 * 
	 * @param request
	 * @param response
	 * @param monthId
	 *            考勤表ID
	 * @param pageable
	 *            分页Pageable
	 */
	@RequestMapping(value = "/getAllStaffAttendanceByReportId**", method = RequestMethod.GET)
	public void getAllStaffAttendanceByMonthId(HttpServletRequest request, HttpServletResponse response,
				                                                                       @RequestParam(value = "reportId") String reportId,
				                                                                       @RequestParam(value = "pageNo") Integer pageNo,
																						@RequestParam(value = "pageSize") Integer pageSize,
																						@RequestParam(value ="totalCount") Integer totalCount) {
		PageRequest pageable = new PageRequest(pageNo , pageSize , totalCount);
		try {
			SalAttenExcelModel attendanceDatas = attendanceService.getAllStaffAttendanceByReportId(reportId,
					pageable);
			this.writeSuccessJsonToClient(response, attendanceDatas);
		} catch (Exception e) {
			this.writeFailJsonToClient(response);
			e.printStackTrace();
		}
	}

	/**
	 * 选择多个员工和该月考勤的ID来得到这些员工的考勤详情
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/getMutiStaffAttendanceDetail**", method = RequestMethod.POST)
	public void getMutiStaffAttendanceDetail(HttpServletRequest request, HttpServletResponse response) {
		SalMutiStaffInfoModel mutiStaffInfoModel = this.fromInputJson(request, SalMutiStaffInfoModel.class);
		try {
			List<SalStaffAttendanceModel> attendanceDatas = attendanceService.getMutiStaffAttendanceDetail(
					mutiStaffInfoModel.getStaffIds(), mutiStaffInfoModel.getAttendanceReportId());
			this.writeSuccessJsonToClient(response, attendanceDatas);
		} catch (Exception e) {
			this.writeFailJsonToClient(response);
			e.printStackTrace();
		}
	}

	/**
	 * 修改某员工的考勤数据后可以保存到数据库
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/updateMutiStaffAttendance**", method = RequestMethod.POST)
	public void updateMutiStaffAttendance(HttpServletRequest request, HttpServletResponse response) {
		SalUpdateMutiStaffModel updateMutiStaffAttendanceModel = this.fromInputJson(request,
				SalUpdateMutiStaffModel.class);
		try {
			Boolean updateRs = null;
			if (updateMutiStaffAttendanceModel != null) {
				updateRs = attendanceService.updateMutiStaffAttendance(updateMutiStaffAttendanceModel.getStaffAttendances());
			}
			this.writeSuccessJsonToClient(response, updateRs);
		} catch (Exception e) {
			this.writeFailJsonToClient(response);
			e.printStackTrace();
		}
	}
	
	/**
	 * 根据模板去解析考勤数据
	 */
	@RequestMapping(value="parseAttenExcel" , method =RequestMethod.GET)
	public void parseAttenExcel(HttpServletRequest request , HttpServletResponse response,
														@RequestParam("fileId") String fileId){
			CallContext callContext = this.getCallContext(request);
			fileId = URLDecoder.decode(fileId);
			try{
				SalAttenExcelModel salAttenExcelModel =	attendanceService.parseAttenExcel(callContext,fileId);
					this.writeSuccessJsonToClient(response, salAttenExcelModel);
			} catch (Exception e) {
				e.printStackTrace();
			}
	}
	@RequestMapping(value = { "/nextrecord**" }, method = RequestMethod.GET)
	public void nextRecord(HttpServletRequest request, HttpServletResponse response,
												@RequestParam("cacheKey") String cacheKey,
												@RequestParam("pageNo")Integer pageNo,
												@RequestParam("pageSize")Integer pageSize,
												@RequestParam("totalCount")Integer totalCount)throws Exception {
		try{
			SalAttenExcelModel salAttenExcelModel = (SalAttenExcelModel) cacheableService.getRawObjectFromCache(cacheKey);
			salAttenExcelModel.setPageNo(pageNo);
			salAttenExcelModel.setPageSize(pageSize);
			totalCount = salAttenExcelModel.getTotalCount();
			salAttenExcelModel.setTotalCount(totalCount);
			   if(totalCount<pageSize&&totalCount>0){
			    	  salAttenExcelModel.setTotalPages(1);
			    }else{
			    	  salAttenExcelModel.setTotalPages(totalCount/pageSize+1);
			    }
			Integer beginNum=(pageNo-1)*pageSize;
			Integer endNum=beginNum+pageSize;
			if(endNum>totalCount){
				endNum=totalCount-1;
			}
			List<SalStaffAttendanceModel>  subList=	salAttenExcelModel.getStaffAttens().subList(beginNum, endNum);
			salAttenExcelModel.setStaffAttens(subList);
			this.writeSuccessJsonToClient(response, salAttenExcelModel);
		}catch(Exception e){
			e.printStackTrace();
		}		
	}
	/**
	 * 数据提交
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value = { "/commit**" }, method = RequestMethod.GET)
	public void commit(HttpServletRequest request, HttpServletResponse response,
			                              @RequestParam("cacheKey")String cacheKey)throws Exception {
		CallContext callContext = this.getCallContext(request);
		try{
		    Boolean rs = attendanceService.commitAttenExcel(callContext, cacheKey);
		    this.writeSuccessJsonToClient(response, rs);
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	

	@Override
	protected String getHomePageUrl(String param) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected SalAttendanceService getService() {
		// TODO Auto-generated method stub
		return null;
	}
}
