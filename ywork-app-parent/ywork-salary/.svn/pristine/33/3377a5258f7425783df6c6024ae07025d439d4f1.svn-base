package me.ywork.salary.service.impl;

import me.ywork.context.CallContext;
import me.ywork.salary.model.SalRuleDetailModel;
import me.ywork.salary.model.SalRuleModel;
import me.ywork.salary.model.StaffBaseInfoModel;
import me.ywork.salary.repository.SalReportRepository;
import me.ywork.salary.repository.SalRuleRepository;
import me.ywork.salary.repository.StaffBaseInfoRepository;
import me.ywork.salary.service.SalRuleService;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by xiaobai on 2017/1/11.
 */
@Service
public class SalRuleServiceImpl implements SalRuleService {
	@Autowired
	private SalRuleRepository salRuleRepository;
	@Autowired
	private StaffBaseInfoRepository staffBaseInfoRepository;

	@Override
	public List<SalRuleModel> getAllSalRules(String corpId) {
		if (StringUtils.isBlank(corpId)) {
			throw new IllegalArgumentException("getAllSalaryRules param corpId is null or empty");
		}
		List<SalRuleModel> salRuleModels = null;
		try {
			salRuleModels = salRuleRepository.getAllSalRules(corpId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return salRuleModels;
	}

	@Override
	public SalRuleDetailModel getSalRuleByRuleId(String ruleId) {
		if (StringUtils.isBlank(ruleId)) {
			throw new IllegalArgumentException("getSalaryRuleByRuleId param ruleId is null or empty");
		}
		SalRuleDetailModel salRuleDetailModel = null;
		try {
			salRuleDetailModel = salRuleRepository.getCorpSalRuleByRuleid(ruleId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return salRuleDetailModel;
	}

	@Override
	public Boolean updateSalRule(SalRuleDetailModel salaryRule) {
		if (salaryRule == null) {
			throw new IllegalArgumentException("updateSalaryRule param salaryRule is null");
		}
		Boolean rs = null;
		try {
			SalRuleDetailModel salRuleDetailModel = salRuleRepository
					.getCorpSalRuleByRuleid(salaryRule.getCorpSalRuleId());
			if (salRuleDetailModel != null) {
				salRuleDetailModel.setCalSalDays(salaryRule.getCalSalDays());
				salRuleDetailModel.setFitNums(salaryRule.getFitNums());
				salRuleDetailModel.setLateEarlyDeduct(salRuleDetailModel.getLateEarlyDeduct());
				salRuleDetailModel.setLateEarlyDeductType(salRuleDetailModel.getLateEarlyDeductType());
				salRuleDetailModel.setSeriousLateDeduct(salaryRule.getSeriousLateDeduct());
				salRuleDetailModel.setStayAwayDeduct(salRuleDetailModel.getStayAwayDeduct());
				rs = salRuleRepository.updateSalRule(salRuleDetailModel) > 0;
			}
		} catch (Exception e) {
			rs = false;
			e.printStackTrace();
		}
		return rs;
	}

	@Override
	public boolean deleteById(CallContext callContext, String id) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<StaffBaseInfoModel> getStafiesByCopSalRuleId(String ruleId) {
		if(StringUtils.isBlank(ruleId)){
			throw new IllegalArgumentException("getStafiesByCopSalRuleId param ruleId is null or empty");
		}
		List<StaffBaseInfoModel>  staffBaseInfoModels = staffBaseInfoRepository.getStafiesByCopSalRuleId(ruleId);
		return staffBaseInfoModels;
	}

	@Override
	public Boolean updateBaseSalRuleStaffies(StaffBaseInfoModel staffBaseInfoModel) {
		if(staffBaseInfoModel == null){
			throw new IllegalArgumentException("updateBaseSalRuleStaffies param staffBaseInfoModel is null or empty");
		}
		List<String> staffies = staffBaseInfoModel.getStaffies();
		Short salRule = staffBaseInfoModel.getSalRule();
		String corpId = staffBaseInfoModel.getCorpId();
		return null;
	}
	
	
	
	
}
