package me.ywork.salary.controller;

import java.net.URLDecoder;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.redisson.cache.CacheableService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import me.ywork.context.CallContext;
import me.ywork.controller.RestController;
import me.ywork.page.PageData;
import me.ywork.page.PageDataImpl;
import me.ywork.page.PageRequest;
import me.ywork.salary.model.SalMutiStaffInfoModel;
import me.ywork.salary.model.SalStaffBaseInfoModel;
import me.ywork.salary.model.SalSysFieldItemModel;
import me.ywork.salary.model.SalInfoDetailModel;
import me.ywork.salary.model.SalInfoExcelModel;
import me.ywork.salary.model.SalUpdateMutiStaffModel;
import me.ywork.salary.service.SalInfoService;

/**
 * 员工薪资信息模块的控制器
 * 
 **/
@Controller
@RequestMapping(value = { "**/app/calsalary/salInfo" })
public class SalInfoController extends RestController<SalInfoService> {

	@Autowired
	private SalInfoService staffSalInfoService;
	@Autowired
	private CacheableService cacheableService;

	/**
	 * 获取员工薪详情:获取所有员工的薪资详情，要分页
	 * 
	 * @param request
	 * @param response
	 * @param pageNo
	 * @param pageSize
	 * @param totalCount
	 */
	@RequestMapping(value = "/getStaffSalInfos**", method = RequestMethod.GET)
	public void getStaffSalaryInfos(HttpServletRequest request, HttpServletResponse response,
															@RequestParam(value = "pageNo")Integer pageNo,
															@RequestParam(value = "pageSize") Integer pageSize,
															@RequestParam(value = "totalCount") Long totalCount) {
		try {
			CallContext callContext = this.getCallContext(request);
			String corpId = callContext.getCorpId();
			PageRequest pageable = new PageRequest(pageNo, pageSize,totalCount );
			PageData<SalStaffBaseInfoModel> staffSalInfoModels = staffSalInfoService.getStaffSalInfos(corpId,pageable);
			List<SalStaffBaseInfoModel> staffSalInfoList =staffSalInfoModels.getDatas();
			Double shouldPaySal =null;
			for(SalStaffBaseInfoModel salStaffBaseInfoModel:staffSalInfoList){//循环将员工工资总数除以100
			   shouldPaySal = salStaffBaseInfoModel.getShouldPaySal();
				if(shouldPaySal != null){
					salStaffBaseInfoModel.setShouldPaySal(shouldPaySal/100);
				}			
			}
			PageData<SalStaffBaseInfoModel>staffSalInfoList2= new PageDataImpl<>(staffSalInfoList, staffSalInfoModels.getPageable());		
			this.writeSuccessJsonToClient(response, staffSalInfoList2);
		} catch (Exception e) {
			e.printStackTrace();
			this.writeFailJsonToClient(response);
		}
	}

	/**
	 * 获取员工薪资详情:通过员工ID来获取该员工的薪资详情
	 * 
	 * @param request
	 * @param response
	 * @param dingStaffId 员工的钉钉ID
	 */
	@RequestMapping(value = "/getSalInfosByStaffId**", method = RequestMethod.GET)
	public void getSalaryInfosByStaffId(HttpServletRequest request, HttpServletResponse response,
																	@RequestParam(value = "staffId") String dingStaffId) {
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		try {
			SalInfoDetailModel staffSalInfoDetailModel = staffSalInfoService.getSalInfosByStaffId(corpId ,null,null, dingStaffId);
			double itemValue =0.0;
			List<SalSysFieldItemModel> sysFieldItemList  = staffSalInfoDetailModel.getItemModels();
			for(SalSysFieldItemModel salSysFieldItem:sysFieldItemList){//循环将员工工资组成部分除以100
				itemValue = salSysFieldItem.getItemValue();;
				salSysFieldItem.setItemValue(itemValue/100);
			}
			staffSalInfoDetailModel.setItemModels(sysFieldItemList);
			this.writeSuccessJsonToClient(response, staffSalInfoDetailModel.getItemModels());
		} catch (Exception e) {
			e.printStackTrace();
			this.writeFailJsonToClient(response);
			
		}
	}

	/**
	 * 获取选中人员工资详情:通过编辑可以获取多个人的薪资详情
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/getMutiStaffSalInfosDetail**", method = RequestMethod.POST)
	public void getMutiStaffSalaryInfosDetail(HttpServletRequest request, HttpServletResponse response) {
		SalMutiStaffInfoModel mutiStaffInfoModel = this.fromInputJson(request, SalMutiStaffInfoModel.class);
		try {
			List<SalInfoDetailModel> staffSalInfoDetailModels = staffSalInfoService
					.getMutiStaffSalInfosDetail(mutiStaffInfoModel.getCorpId(), mutiStaffInfoModel.getStaffIds());
			this.writeSuccessJsonToClient(response, staffSalInfoDetailModels);
		} catch (Exception e) {
			this.writeFailJsonToClient(response);
			e.printStackTrace();
		}
	}

	/**
	 * 批量修改多个人的薪资
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/updateMutiStaffInfos**", method = RequestMethod.POST)
	public void updateMutiStaffInfos(HttpServletRequest request, HttpServletResponse response) {
		SalUpdateMutiStaffModel updateMutiStaffAttendanceModel = this.fromInputJson(request,
				SalUpdateMutiStaffModel.class);
		try {
			List<SalInfoDetailModel> salInfos = updateMutiStaffAttendanceModel.getStaffSalInfoDetailModels();
			Boolean updateRs = staffSalInfoService.updateMutiStaffInfos(salInfos);
			this.writeSuccessJsonToClient(response, updateRs);
		} catch (Exception e) {
			e.printStackTrace();
			this.writeFailJsonToClient(response);
		}
	}
	
	/**
	 *   计算未设置薪资详情的人数
	 *   
	 * @param request 
	 * @param response
	 */
	@RequestMapping(value = "/calcuUnSetSalStaffNum**",method = RequestMethod.GET)
	public void calcuUnSetSalStaffNum(HttpServletRequest request, HttpServletResponse response){
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		 try{
			Integer unsetNum = staffSalInfoService.calcuUnSetSalStaffNum(corpId);
			this.writeSuccessJsonToClient(response , unsetNum);
		 }catch(Exception e){
			 e.printStackTrace();
		 }
	}


	/**
	 * 根据模板去解析员工薪资信息数据
	 * 
	 * @param request
	 * @param response
	 * @param fileId 文件的Id
	 */
		@RequestMapping(value="parseSalInfoExcel" , method =RequestMethod.GET)
		public void parseSalInfoExcel(HttpServletRequest request , HttpServletResponse response,
				@RequestParam("fileId") String fileId){
				CallContext callContext = this.getCallContext(request);
				fileId = URLDecoder.decode(fileId);
			   try {
				   SalInfoExcelModel salInfo =   staffSalInfoService.parseSalInfoExcel(callContext, fileId);
				   List<SalStaffBaseInfoModel> salStaffBaseInfo = null;
				   if(salInfo!=null){
					    salStaffBaseInfo =  salInfo.getSalInfos();
					   Double itemValue =null;
					   for(SalStaffBaseInfoModel salStaffBaseInfoModel : salStaffBaseInfo){
						   List<SalSysFieldItemModel> salSysFields= salStaffBaseInfoModel.getSalFields();
						   for(SalSysFieldItemModel salSysField:salSysFields){
							   itemValue = salSysField.getItemValue();
							   if(itemValue!=null){
								   salSysField.setItemValue(itemValue/100);
							   }
						   }
						   salStaffBaseInfoModel.setSalFields(salSysFields);
					   }
				   }
				   salInfo.setSalInfos(salStaffBaseInfo);
					this.writeSuccessJsonToClient(response, salInfo);
				}catch(Exception e){
					e.printStackTrace();
				}
	}
		
	
		/**
		 *   下一页上传的薪资数据
		 * @param request
		 * @param response
		 * @param cacheKey
		 * @param pageNo
		 * @param pageSize
		 * @param totalCount
		 */
		@RequestMapping(value = { "/nextrecord**" }, method = RequestMethod.GET)
		public void nextRecord(HttpServletRequest request, HttpServletResponse response,
													@RequestParam("cacheKey") String cacheKey,
													@RequestParam("pageNo")Integer pageNo,
													@RequestParam("pageSize")Integer pageSize,
													@RequestParam("totalCount")Integer totalCount) {
			try{
				SalInfoExcelModel salInfoExcelModel = (SalInfoExcelModel) cacheableService.getRawObjectFromCache(cacheKey);
				salInfoExcelModel.setPageNo(pageNo);
				salInfoExcelModel.setPageSize(pageSize);
				totalCount = salInfoExcelModel.getTotalCount();
				salInfoExcelModel.setTotalCount(totalCount);
			   if(totalCount<pageSize&&totalCount>0){
				   salInfoExcelModel.setTotalPages(1);
			    }else{
			    	salInfoExcelModel.setTotalPages(totalCount/pageSize+1);
			    }
			   
				Integer beginNum=(pageNo-1)*pageSize;
				Integer endNum=beginNum+pageSize;
				if(endNum>totalCount){
					endNum=totalCount;
				}
				List<SalStaffBaseInfoModel>  subList=	salInfoExcelModel.getSalInfos().subList(beginNum, endNum);
				salInfoExcelModel.setSalInfos(subList);
				 List<SalStaffBaseInfoModel> salStaffBaseInfo = null;
				   if(salInfoExcelModel!=null){
					    salStaffBaseInfo =  salInfoExcelModel.getSalInfos();
					   Double itemValue =null;
					   for(SalStaffBaseInfoModel salStaffBaseInfoModel : salStaffBaseInfo){
						   List<SalSysFieldItemModel> salSysFields= salStaffBaseInfoModel.getSalFields();
						   if(salSysFields!=null){
							   for(SalSysFieldItemModel salSysField:salSysFields){
								   itemValue = salSysField.getItemValue();
								   if(itemValue!=null){
									   salSysField.setItemValue(itemValue/100);
								   }
								   //salSysField.setItemValue(itemValue);
							   }
						   }
						   salStaffBaseInfoModel.setSalFields(salSysFields);
					   }
				   }
				   salInfoExcelModel.setSalInfos(salStaffBaseInfo);
				this.writeSuccessJsonToClient(response, salInfoExcelModel);
			}catch(Exception e){
				e.printStackTrace();
			}		
		}
		/**
		 *上员工薪资信息数据提交
		 * 
		 * @param request
		 * @param response
		 * @param cacheKey  
		 * @throws Exception
		 */
		@RequestMapping(value = { "/commit**" }, method = RequestMethod.GET)
		public void commit(HttpServletRequest request, HttpServletResponse response,
				                              @RequestParam("cacheKey")String cacheKey) {
			CallContext callContext = this.getCallContext(request);
			try{
			    Boolean rs = staffSalInfoService.commitSalInfoExcel(callContext, cacheKey);
			    this.writeSuccessJsonToClient(response, rs);
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		

		@Override
		protected String getHomePageUrl(String param) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		protected SalInfoService getService() {
			// TODO Auto-generated method stub
			return null;
		}
}
