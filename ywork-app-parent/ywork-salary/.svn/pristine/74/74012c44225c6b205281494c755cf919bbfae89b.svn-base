package me.ywork.salary.controller;

import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.alibaba.dubbo.common.logger.Logger;
import com.alibaba.dubbo.common.logger.LoggerFactory;

import me.ywork.context.CallContext;
import me.ywork.controller.RestController;
import me.ywork.page.PageData;
import me.ywork.page.PageRequest;
import me.ywork.salary.model.SalStaffSalReportDetailModel;
import me.ywork.salary.model.SalStaffSalReportModel;
import me.ywork.salary.model.SalMutiStaffInfoModel;
import me.ywork.salary.model.SalCorpReportModel;
import me.ywork.salary.model.SalInfoDetailModel;
import me.ywork.salary.model.SalUpdateMutiStaffModel;
import me.ywork.salary.service.SalReportService;

/**
 *  工资报表的控制器
 *
 **/
@Controller
@RequestMapping(value = { "**/app/calsalary/salreport" })
public class SalReportController extends RestController<SalReportService> {

	
	@Autowired
	private SalReportService salReportService;
	private static final Logger logger = LoggerFactory.getLogger(SalAttendanceController.class);
	/**
	 * 获取所有月份的工资报表
	 * 
	 * @param request
	 * @param response
	 * @param corpId  钉钉企业号
	 */
	@RequestMapping(value = "/getAllSalReports**", method = RequestMethod.GET)
	public void getAllSalReports(HttpServletRequest request, HttpServletResponse response) {
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		try {
			logger.info("开始获得钉钉企业号为：".concat(corpId).concat("的所有月份的工资报表"));
			List<SalCorpReportModel> salReportModels = salReportService.getAllSalReports(corpId);
			logger.debug("钉钉号为:{}返回{}个月份的数据");
			this.writeSuccessJsonToClient(response, salReportModels);
		} catch (Exception e) {
			e.printStackTrace();
			this.writeFailJsonToClient(response);
		}
	}

	/**
	 * 计算该月企业的薪资
	 * 
	 * @param request
	 * @param response
	 */
	public void caculateCorpSal(HttpServletRequest request, HttpServletResponse response,
			@RequestParam("corpId") String corpId) {

	}

	/**
	 * 获取该月份工资详情：根据工资表ID来获得该月的工资详情
	 * 
	 * @param request
	 * @param response
	 * @param monthSalId
	 *            月度工作报表ID
	 * @param pageable
	 *            分页插件Pageable
	 */
	@RequestMapping(value = "/getUserSalList**", method = RequestMethod.GET)
	public void getSalaryDatailByMonthId(HttpServletRequest request, HttpServletResponse response,
			                                                            @RequestParam(value = "reportId") String reportId,
																		@RequestParam(value = "pageNo") Integer pageNo,
																		@RequestParam(value = "pageSize") Integer pageSize,
																		@RequestParam(value ="totalCount") Integer totalCount) {
		PageRequest pageable = new PageRequest(pageNo , pageSize , totalCount);
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		try {
			PageData<SalStaffSalReportModel> monthStaffModels = salReportService.getSalDatailByReportId(reportId,callContext.getCorpId(),
					pageable);
			this.writeSuccessJsonToClient(response, monthStaffModels);
		} catch (Exception e) {
			e.printStackTrace();
			this.writeFailJsonToClient(response);
		}
	}

	/**
	 * 锁定该月工资表：根据工资表ID来锁定该工资表
	 * 
	 * @param request
	 * @param response
	 * @param 工资报表主键
	 * @param reportState
	 *            更新的状态
	 */
	@RequestMapping(value = "/lockSalReportById**", method = RequestMethod.POST)
	public void lockSalReportById(HttpServletRequest request, HttpServletResponse response) {
		try {
			SalCorpReportModel salReportModel = this.fromInputJson(request , SalCorpReportModel.class);
			Boolean updateRs = salReportService.lockSalReportById(salReportModel.getId(), salReportModel.getSalReportState());
			this.writeSuccessJsonToClient(response, updateRs);
		} catch (Exception e) {
			e.printStackTrace();
			this.writeFailJsonToClient(response);
		}
	}

	/**
	 * 获取选中人员该月工资详情(修改浮动款项):传递工资表ID和多个员工ID去返回多个员工的工资数据
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/getSelectedStaffSalDetail**", method = RequestMethod.POST)
	public void getSelectedStaffSalaryDetail(HttpServletRequest request, HttpServletResponse response) {
		SalMutiStaffInfoModel mutiStaffInfoModel = this.fromInputJson(request, SalMutiStaffInfoModel.class);
		try {
			List<SalStaffSalReportDetailModel> monthStaffSalModels = salReportService.getSelectedStaffSalDetail(
					mutiStaffInfoModel.getStaffIds(), mutiStaffInfoModel.getSalReportId());
			this.writeSuccessJsonToClient(response, monthStaffSalModels);
		} catch (Exception e) {
			e.printStackTrace();
			this.writeFailJsonToClient(response);
		}
	}

	/**
	 * 保存修改:具体员工的工资情况可以修改,向后台传递的是修改后的工资数据
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/updateSalsOnStaffes**", method = RequestMethod.POST)
	public void updateSalariesOnStaffes(HttpServletRequest request, HttpServletResponse response) {
		SalUpdateMutiStaffModel updateMutiStaffAttendanceModel = this.fromInputJson(request,
				SalUpdateMutiStaffModel.class);
		try {
			Boolean updateRs = null;
			if (updateMutiStaffAttendanceModel != null) {		
				updateRs = salReportService
						.updateSalsOnStaffes(updateMutiStaffAttendanceModel.getMonthStaffSalDetailModels());
			}
			this.writeSuccessJsonToClient(response, updateRs);
		} catch (Exception e) {
			this.writeFailJsonToClient(response);
			e.printStackTrace();
		}
	}
	


	@Override
	protected String getHomePageUrl(String param) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected SalReportService getService() {
		// TODO Auto-generated method stub
		return null;
	}
}
