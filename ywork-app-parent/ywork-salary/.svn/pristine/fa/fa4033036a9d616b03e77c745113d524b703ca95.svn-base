package me.ywork.salary.controller;

import java.net.URLDecoder;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.redisson.cache.CacheableService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.alibaba.dubbo.common.logger.Logger;
import com.alibaba.dubbo.common.logger.LoggerFactory;

import me.ywork.context.CallContext;
import me.ywork.controller.RestController;
import me.ywork.page.PageRequest;
import me.ywork.salary.model.SalAttenExcelModel;
import me.ywork.salary.model.SalCorpAttenModel;
import me.ywork.salary.model.SalCorpDeductModel;
import me.ywork.salary.model.SalCustomizedAttenFieldModel;
import me.ywork.salary.model.SalMutiStaffInfoModel;
import me.ywork.salary.model.SalStaffAttendanceModel;
import me.ywork.salary.model.SalSysFieldItemModel;
import me.ywork.salary.model.SalUpdateMutiStaffModel;
import me.ywork.salary.service.SalAttendanceService;
import me.ywork.salary.service.SalCalcuSalService;

/**
  * 考勤模块的控制器
 *
 **/
@Controller
@RequestMapping(value = { "**/app/calsalary/attendance" })
public class SalAttendanceController extends RestController<SalAttendanceService> {
	@Autowired
	private SalAttendanceService attendanceService;
	
	@Autowired
	private SalCalcuSalService salCalcuSalService;
	// 缓存机制
	@Autowired
	private CacheableService cacheableService;
	
	private static final Logger logger = LoggerFactory.getLogger(SalAttendanceController.class);
	/**
	 * 得到企业的月度考勤表的分页数据
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/getAllMonthesAttendanceData**", method = RequestMethod.GET)
	public void getAllMonthesAttendanceData(HttpServletRequest request, HttpServletResponse response) {
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		try {
			List<SalCorpAttenModel> attendanceDatas = attendanceService.getAllMonthesAttendanceData(corpId);
			this.writeSuccessJsonToClient(response, attendanceDatas);
		} catch (Exception e) {
			logger.error("getAllMonthesAttendanceData -- ".concat(corpId).concat("出现异常："),e);
			this.writeFailJsonToClient(response);
		}
	}

	/**
	 * 根据考勤表ID来得到月度考勤表的数据
	 * 
	 * @param request
	 * @param response
	 * @param reportId  考勤报表的ID
	 * @param pageNo
	 * @param pageSize
	 * @param totalCount
	 */
	@RequestMapping(value = "/getAllStaffAttendanceByReportId**", method = RequestMethod.GET)
	public void getAllStaffAttendanceByMonthId(HttpServletRequest request, HttpServletResponse response,
				                                                                       @RequestParam(value = "reportId") String reportId,
				                                                                       @RequestParam(value = "pageNo") Integer pageNo,
																						@RequestParam(value = "pageSize") Integer pageSize,
																						@RequestParam(value ="totalCount") Integer totalCount) {
		PageRequest pageable = new PageRequest(pageNo , pageSize , totalCount);
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		try {
			SalAttenExcelModel attendanceDatas = attendanceService.getAllStaffAttendanceByReportId(corpId,reportId,pageable);
			List<SalStaffAttendanceModel> attendanceData = attendanceDatas.getStaffAttens();
			Integer attendanceDays =null;
			for(SalStaffAttendanceModel salStaffAttendanceModel:attendanceData){
				attendanceDays = salStaffAttendanceModel.getAttendanceDays();
				if(attendanceDays!=null){
			    	salStaffAttendanceModel.setAttendanceDays(attendanceDays/100);
				}
				List<SalCustomizedAttenFieldModel> attenDays =salStaffAttendanceModel.getDetails();
				Integer fieldDay=0;
				for(SalCustomizedAttenFieldModel salCustomizedAttenFieldModel:attenDays){
					fieldDay = salCustomizedAttenFieldModel.getFieldDay();
					if(fieldDay != null){
					   salCustomizedAttenFieldModel.setFieldDay(fieldDay/100);
					}
				}
				salStaffAttendanceModel.setDetails(attenDays);
			}
			this.writeSuccessJsonToClient(response, attendanceDatas);
		} catch (Exception e) {
			logger.error("getAllStaffAttendanceByReportId -- ".concat(corpId).concat("出现异常："),e);
			this.writeFailJsonToClient(response);
		}
	}

	/**
	 * 选择多个员工和该月考勤的ID来得到这些员工的考勤详情
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/getMutiStaffAttendanceDetail**", method = RequestMethod.POST)
	public void getMutiStaffAttendanceDetail(HttpServletRequest request, HttpServletResponse response) {
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		SalMutiStaffInfoModel mutiStaffInfoModel = this.fromInputJson(request, SalMutiStaffInfoModel.class);
		try {
			List<SalStaffAttendanceModel> attendanceDatas = attendanceService.getMutiStaffAttendanceDetail(
					mutiStaffInfoModel.getStaffIds(), mutiStaffInfoModel.getAttendanceReportId());
			this.writeSuccessJsonToClient(response, attendanceDatas);
		} catch (Exception e) {
			logger.error("getMutiStaffAttendanceDetail -- ".concat(corpId).concat("出现异常："),e);
			this.writeFailJsonToClient(response);
		}
	}

	/**
	 * 修改某员工的考勤数据后可以保存到数据库
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/updateMutiStaffAttendance**", method = RequestMethod.POST)
	public void updateMutiStaffAttendance(HttpServletRequest request, HttpServletResponse response) {
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		SalUpdateMutiStaffModel updateMutiStaffAttendanceModel = this.fromInputJson(request,
				SalUpdateMutiStaffModel.class);
		try {
			Boolean updateRs = null;
			if (updateMutiStaffAttendanceModel != null) {
				updateRs = attendanceService.updateMutiStaffAttendance(updateMutiStaffAttendanceModel.getStaffAttendances());
			}
			this.writeSuccessJsonToClient(response, updateRs);
		} catch (Exception e) {
			logger.error("updateMutiStaffAttendance -- ".concat(corpId).concat("出现异常："),e);
			this.writeFailJsonToClient(response);
		}
	}
	/**
	 * 得到企业审批字段的列表
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/getCorpApproveFieldList**",method=RequestMethod.GET)
	public  void getCorpApproveFieldList(HttpServletRequest request, HttpServletResponse response){
		CallContext callContext = this.getCallContext(request);
		String corpId =  callContext.getCorpId();
         try{
        	 SalUpdateMutiStaffModel  salApprove= attendanceService.getCorpApproveFieldList(corpId);
        	 if(salApprove != null){
        		 Double itemValue = null;
	        	 List<SalSysFieldItemModel> salFieldList = salApprove.getSaFieldList();
	        	 for(SalSysFieldItemModel salSysFieldItemModel:salFieldList){
	        		 itemValue =salSysFieldItemModel.getItemValue();
	        		 if(itemValue!=null){
	        		   salSysFieldItemModel.setItemValue(itemValue/100);
	        		 }
	        	 }
	        	 salApprove.setSaFieldList(salFieldList);
	        	 SalCorpDeductModel  salCorpDeduct =  salApprove.getSalDeduct();
	        	 if(salCorpDeduct!=null){
	        		 Double lackDeduct=null;
	        		 Double lateEarlyDeduct =null;
	        		 Double seriousLateDeduct = null;
	        		 Double stayAwayDeduct = null;
	        		 lackDeduct=salCorpDeduct.getLackDeduct();
	        		 lateEarlyDeduct =salCorpDeduct.getLateEarlyDeduct();
	        		 seriousLateDeduct = salCorpDeduct.getSeriousLateDeduct();
	        		 stayAwayDeduct = salCorpDeduct.getStayAwayDeduct();
	        		 if(lackDeduct!=null){
	        			 salCorpDeduct.setLackDeduct(lackDeduct/100);
	        		 }
	        		 if(lateEarlyDeduct!=null){
        			    salCorpDeduct.setLateEarlyDeduct(lateEarlyDeduct/100);
	        		 }
	        		 if(seriousLateDeduct!=null){
        			    salCorpDeduct.setSeriousLateDeduct(seriousLateDeduct/100);
	        		 }
	        		 if(stayAwayDeduct!=null){
        			     salCorpDeduct.setStayAwayDeduct(stayAwayDeduct/100);
	        		 }
	        	 }
	        	 salApprove.setSalDeduct(salCorpDeduct);
        	 }
        	 this.writeSuccessJsonToClient(response,salApprove);
         }catch(Exception e){
        	 logger.error("getCorpApproveFieldList -- ".concat(corpId).concat("出现异常："),e);
        	 this.writeFailJsonToClient(response);
         }
	}
	/**
	 * 更新企业审批字段的扣款
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/updateCorpApproveField**",method=RequestMethod.POST)
	public void updateCorpApproveField(HttpServletRequest request, HttpServletResponse response){
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		SalUpdateMutiStaffModel salUpdateMutiStaffModel = this.fromInputJson(request , SalUpdateMutiStaffModel.class);
		try{
			Boolean rs =attendanceService.updateCorpApproveField(corpId , salUpdateMutiStaffModel);
			this.writeSuccessJsonToClient(response, rs);
		}catch(Exception e){
			 logger.error("updateCorpApproveField -- ".concat(corpId).concat("出现异常："),e);
			 this.writeFailJsonToClient(response);
		}
	}
	
	/**
	 * 根据模板去解析考勤数据
	 * 
	 * @param request
	 * @param response
	 * @param fileId  文件的ID
	 */
	@RequestMapping(value="parseAttenExcel" , method =RequestMethod.GET)
	public void parseAttenExcel(HttpServletRequest request , HttpServletResponse response,
														@RequestParam("fileId") String fileId){
			CallContext callContext = this.getCallContext(request);
			String corpId = callContext.getCorpId();
			fileId = URLDecoder.decode(fileId);
			try{
				SalAttenExcelModel salAttenExcelModel =	attendanceService.parseAttenExcel(callContext,fileId);
				Integer attenDay = null;
				Integer fieldDay=null;
				if(salAttenExcelModel !=null){
					List<SalStaffAttendanceModel> salStaffAttens =salAttenExcelModel.getStaffAttens();
					for(SalStaffAttendanceModel salStaffAttendanceModel:salStaffAttens){
						attenDay=salStaffAttendanceModel.getAttendanceDays();
						if(attenDay != null){
							salStaffAttendanceModel.setAttendanceDays(attenDay/100);
						}
						List<SalCustomizedAttenFieldModel> details =salStaffAttendanceModel.getDetails();
						if(details!=null){
							for(SalCustomizedAttenFieldModel detail:details){
								fieldDay = detail.getFieldDay();
								if(fieldDay !=null){
								   detail.setFieldDay(fieldDay/100);
								}
							}
						}
						salStaffAttendanceModel.setDetails(details);
					}
					salAttenExcelModel.setStaffAttens(salStaffAttens);
				}
					this.writeSuccessJsonToClient(response, salAttenExcelModel);
			} catch (Exception e) {
				 logger.error("parseAttenExcel -- ".concat(corpId).concat("出现异常："),e);
				 this.writeFailJsonToClient(response);
			}
	}
	
	/**
	 *   下一页考勤报表的数据
	 *   
	 * @param request
	 * @param response
	 * @param cacheKey  缓存考勤报表的redis KEY
	 * @param pageNo
	 * @param pageSize
	 * @param totalCount
	 */
	@RequestMapping(value = { "/nextrecord**" }, method = RequestMethod.GET)
	public void nextRecord(HttpServletRequest request, HttpServletResponse response,
												@RequestParam("cacheKey") String cacheKey,
												@RequestParam("pageNo")Integer pageNo,
												@RequestParam("pageSize")Integer pageSize,
												@RequestParam("totalCount")Integer totalCount) {
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		try{
			SalAttenExcelModel salAttenExcelModel = (SalAttenExcelModel) cacheableService.getRawObjectFromCache(cacheKey);
			salAttenExcelModel.setPageNo(pageNo);
			salAttenExcelModel.setPageSize(pageSize);
			totalCount = salAttenExcelModel.getTotalCount();
			salAttenExcelModel.setTotalCount(totalCount);
			   if(totalCount<pageSize&&totalCount>0){
			    	  salAttenExcelModel.setTotalPages(1);
			    }else{
			    	  salAttenExcelModel.setTotalPages(totalCount/pageSize+1);
			    }
			Integer beginNum=(pageNo-1)*pageSize;
			Integer endNum=beginNum+pageSize;
			if(endNum>totalCount){
				endNum=totalCount;
			}
			List<SalStaffAttendanceModel>  subList=	salAttenExcelModel.getStaffAttens().subList(beginNum, endNum);
			salAttenExcelModel.setStaffAttens(subList);
			Integer attenDay = null;
			Integer fieldDay=null;
			if(salAttenExcelModel !=null){
				List<SalStaffAttendanceModel> salStaffAttens =salAttenExcelModel.getStaffAttens();
				for(SalStaffAttendanceModel salStaffAttendanceModel:salStaffAttens){
					attenDay=salStaffAttendanceModel.getAttendanceDays();
					if(attenDay != null){
						salStaffAttendanceModel.setAttendanceDays(attenDay/100);
					}
					List<SalCustomizedAttenFieldModel> details =salStaffAttendanceModel.getDetails();
					if(details!=null){
						for(SalCustomizedAttenFieldModel detail:details){
							fieldDay = detail.getFieldDay();
							if(fieldDay !=null){
							   detail.setFieldDay(fieldDay/100);
							}
						}
					}
					salStaffAttendanceModel.setDetails(details);
				}
				  salAttenExcelModel.setStaffAttens(salStaffAttens);
			}		 
			this.writeSuccessJsonToClient(response, salAttenExcelModel);
		}catch(Exception e){
			 logger.error("nextrecord -- ".concat(corpId).concat("出现异常："),e);
			 this.writeFailJsonToClient(response);
		}		
	}
	/**
	 * 数据提交
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = { "/commit**" }, method = RequestMethod.GET)
	public void commit(HttpServletRequest request, HttpServletResponse response,
			                              @RequestParam("cacheKey")String cacheKey) {
		CallContext callContext = this.getCallContext(request);
		try{
		    Boolean rs = attendanceService.commitAttenExcel(callContext, cacheKey);
		    this.writeSuccessJsonToClient(response, rs);
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	@RequestMapping(value = { "/test**" }, method = RequestMethod.GET)
	public void test(HttpServletRequest request, HttpServletResponse response){
		CallContext callContext = this.getCallContext(request);
		String corpId = callContext.getCorpId();
		try{
		Boolean s=salCalcuSalService.calcuSalReportAutomatic(callContext.getCorpId());
		this.writeSuccessJsonToClient(response, s);
		}catch(Exception e){
			 logger.error("commit -- ".concat(corpId).concat("出现异常："),e);
			 this.writeFailJsonToClient(response);
		}
	}

	@Override
	protected String getHomePageUrl(String param) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected SalAttendanceService getService() {
		// TODO Auto-generated method stub
		return null;
	}
}
