package me.ywork.salary.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.alibaba.dubbo.common.logger.Logger;
import com.alibaba.dubbo.common.logger.LoggerFactory;

import me.ywork.context.CallContext;
import me.ywork.controller.RestController;
import me.ywork.page.PageData;
import me.ywork.page.PageRequest;
import me.ywork.salary.enumeration.SalDetailShowType;
import me.ywork.salary.model.SalCorpMbSalListModel;
import me.ywork.salary.model.SalCorpReportModel;
import me.ywork.salary.model.SalInfoDetailModel;
import me.ywork.salary.model.SalStaffMbSalInfoModel;
import me.ywork.salary.model.SalStaffSalReportModel;
import me.ywork.salary.model.SalSysFieldItemModel;
import me.ywork.salary.service.SalInfoService;
import me.ywork.salary.service.SalReportService;
import me.ywork.salary.util.ValidateUtils;
/**
 * 手机端的控制器
 * 
 */
@Controller
@RequestMapping(value = { "**/app/calsalary/mobile" })
public class SalMbController extends RestController<SalInfoService> {

	@Autowired
	private SalReportService salReportService;
	
	@Autowired
	private SalInfoService salInfoService;
	
	private static final Logger logger = LoggerFactory.getLogger(SalMbController.class);
	
    /**
     *  获取员工所有工资月份
     *  
     * @param request
     * @param response
     */
	@RequestMapping(value = "/getUserSalDates**" , method = RequestMethod.GET)
	public void getUserSalDates(HttpServletRequest request, HttpServletResponse response){
		CallContext callContext = this.getCallContext(request);
		if(ValidateUtils.existCorpIdAndStaffId(callContext)==Boolean.FALSE){
			logger.error("--getUserSalDates -- corpId or userId is null");
			this.writeFailJsonToClient(response);
			return;
		}
		String staffId = callContext.getUserId();
		String corpId = callContext.getCorpId();
		try{
			List<SalCorpReportModel> salReportModels = salReportService.getUserSalDates(corpId , staffId);
			this.writeSuccessJsonToClient(response, salReportModels);
		}catch(Exception e){
		      logger.error("getUserSalDates -- ".concat(corpId).concat("出现异常："),e);
			  this.writeFailJsonToClient(response);
		}		
	}
	 /**
	  * 获取该月公司员工工资详情
	 * 
	 * @param request
	 * @param response
	 * @param reportId 薪资报表的主键
	 */
	@RequestMapping(value = "/getUserSalDetail**" , method = RequestMethod.GET)
	public void getUserSalDetail(HttpServletRequest request, HttpServletResponse response,
			                                             @RequestParam(value = "reportId")String reportId){
		CallContext callContext = this.getCallContext(request);
		if(ValidateUtils.existCorpIdAndStaffId(callContext)==Boolean.FALSE){
			logger.error("--getUserSalDetail -- corpId or userId is null");
			this.writeFailJsonToClient(response);
			return;
		}
		String staffId = callContext.getUserId();
		String corpId =callContext.getCorpId();
		try{
			SalStaffMbSalInfoModel  salStaffMbSalInfo =  salReportService.getStaffMbSalInfo(corpId , staffId, reportId);
			this.writeSuccessJsonToClient(response , salStaffMbSalInfo);
		}catch(Exception e){
		      logger.error("getUserSalDetail -- ".concat(corpId).concat("出现异常："),e);
			  this.writeFailJsonToClient(response);
		}			
	}
	
	/**
	 * 获取员工薪资详情的列表
	 * 
	 * @param request
	 * @param response
	 * @param reportId  月度新增报表的主键
	 * @param pageNo
	 * @param pageSize
	 * @param totalCount
	 */
	@RequestMapping(value = "/getUserSalList**", method = RequestMethod.GET)
	public void getSalaryDatailByMonthId(HttpServletRequest request, HttpServletResponse response,
			                                                            @RequestParam(value = "reportId") String reportId,
																		@RequestParam(value = "pageNo") Integer pageNo,
																		@RequestParam(value = "pageSize") Integer pageSize,
																		@RequestParam(value ="totalCount") Long totalCount) {
		PageRequest pageable = new PageRequest(pageNo , pageSize , totalCount);
		CallContext callContext = this.getCallContext(request);
		if(ValidateUtils.existCorpIdAndStaffId(callContext)==Boolean.FALSE){
			logger.error("--getUserSalList -- corpId or userId is null");
			this.writeFailJsonToClient(response);
			return;
		}
		String corpId = callContext.getCorpId();
		SalCorpReportModel salCorpReportModel =	salReportService.getSalReportByReportId(reportId);
		try {
			PageData<SalStaffSalReportModel> monthStaffModels = salReportService.getSalDatailByReportId(reportId,corpId,pageable);
			List<SalStaffSalReportModel> datas =monthStaffModels.getDatas();
		   totalCount = monthStaffModels.getTotalCount();
		  Integer totalPages = monthStaffModels.getTotalPages();
		  SalCorpMbSalListModel salCorpMbSalListModel =new SalCorpMbSalListModel();
		  salCorpMbSalListModel.setCorpId(salCorpMbSalListModel.getCorpId());
		  salCorpMbSalListModel.setCreateDate(salCorpReportModel.getCreateDate());
		  salCorpMbSalListModel.setDatas(datas);
		  salCorpMbSalListModel.setShouldPaySal(salCorpReportModel.getShouldPaySal());
		  salCorpMbSalListModel.setFileUrl(salCorpReportModel.getFileUrl());
		  salCorpMbSalListModel.setId(salCorpReportModel.getId());
		  salCorpMbSalListModel.setInsuranceSal(salCorpReportModel.getInsuranceSal());
		  salCorpMbSalListModel.setModifiedDate(salCorpReportModel.getModifiedDate());
		  salCorpMbSalListModel.setMonthTime(salCorpReportModel.getMonthTime());
		  salCorpMbSalListModel.setStaffCost(salCorpReportModel.getStaffCost());
		  salCorpMbSalListModel.setPageNo(pageNo);
		  salCorpMbSalListModel.setPageSize(pageSize);
		  salCorpMbSalListModel.setTotalCount(totalCount);
		  salCorpMbSalListModel.setTotalPages(totalPages);
			this.writeSuccessJsonToClient(response, salCorpMbSalListModel);
		} catch (Exception e) {
		      logger.error("getUserSalList -- ".concat(corpId).concat("出现异常："),e);
			   this.writeFailJsonToClient(response);
		}
	}

	/**
	 * 获取所有月份的工资报表
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/getAllSalReports**", method = RequestMethod.GET)
	public void getAllSalReports(HttpServletRequest request, HttpServletResponse response) {
		CallContext callContext = this.getCallContext(request);
		if(ValidateUtils.existCorpIdAndStaffId(callContext)==Boolean.FALSE){
			logger.error("--getAllSalReports -- corpId or userId is null");
			this.writeFailJsonToClient(response);
			return;
		}
		String corpId = callContext.getCorpId();
		try {
			logger.info("开始获得钉钉企业号为：".concat(corpId).concat("的所有月份的工资报表"));
			List<SalCorpReportModel> salReportModels = salReportService.getAllSalReports(corpId);
			logger.debug("钉钉号为:{}返回{}个月份的数据");
			this.writeSuccessJsonToClient(response, salReportModels);
		} catch (Exception e) {
		      logger.error("getAllSalReports -- ".concat(corpId).concat("出现异常："),e);
			   this.writeFailJsonToClient(response);
		}
	}
	
	/**
	 * 通过员工ID来获取该员工的薪资详情
	 * 
	 * @param request
	 * @param response
	 * @param dingStaffId 员工钉钉ID
	 * @param reportId  企业薪资报表的ID
	 */
	@RequestMapping(value = "/getSalInfosByStaffId**", method = RequestMethod.GET)
	public void getSalaryInfosByStaffId(HttpServletRequest request, HttpServletResponse response,
																	@RequestParam(value = "staffId") String dingStaffId,
																	@RequestParam(value="reportId")String reportId) {
		CallContext callContext = this.getCallContext(request);
		if(ValidateUtils.existCorpIdAndStaffId(callContext)==Boolean.FALSE){
			logger.error("--getSalInfosByStaffId -- corpId or userId is null");
			this.writeFailJsonToClient(response);
			return;
		}
		String corpId = callContext.getCorpId();
		Short showTyppe=SalDetailShowType.MonthSalType.getCode();
		try {
			SalInfoDetailModel staffSalInfoDetailModel = salInfoService.getSalInfosByStaffId(corpId ,reportId,showTyppe, dingStaffId);
			double itemValue =0.0;
			List<SalSysFieldItemModel> sysFieldItemList  = staffSalInfoDetailModel.getItemModels();
			for(SalSysFieldItemModel salSysFieldItem:sysFieldItemList){//循环将员工工资组成部分除以100
				itemValue = salSysFieldItem.getItemValue();;
				salSysFieldItem.setItemValue(itemValue/100);
			}
			staffSalInfoDetailModel.setItemModels(sysFieldItemList);
			this.writeSuccessJsonToClient(response, staffSalInfoDetailModel.getItemModels());
		} catch (Exception e) {
		      logger.error("getSalInfosByStaffId -- ".concat(corpId).concat("出现异常："),e);
			   this.writeFailJsonToClient(response);			
		}
	}
	
	
	@Override
	protected String getHomePageUrl(String param) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected SalInfoService getService() {
		// TODO Auto-generated method stub
		return null;
	}
	
}
